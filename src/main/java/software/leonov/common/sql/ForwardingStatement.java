package software.leonov.common.sql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * A {@code Statement} which forwards all of its method calls to another {@code Statement}. Subclasses should override
 * one or more methods to modify the behavior of the backing statement as desired per the
 * <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 * <p>
 * <b>Warning:</b> The methods of {@code ForwardingStatement} forward <b>indiscriminately</b> to the methods of the
 * delegate. Overriding a particular method will not change the behavior of other methods which invoke it internally.
 * This can lead to unexpected behavior.
 * 
 * @author Zhenya Leonov
 */
public abstract class ForwardingStatement implements Statement {

    protected ForwardingStatement() {
    }

    /**
     * Returns the backing {@code Statement} instance that methods are forwarded to.
     * 
     * @return the backing {@code Statement} instance that methods are forwarded to
     */
    protected abstract Statement delegate();

    @Override
    public void addBatch(String sql) throws SQLException {
        delegate().addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException {
        delegate().cancel();
    }

    @Override
    public void clearBatch() throws SQLException {
        delegate().clearBatch();
    }

    @Override
    public void clearWarnings() throws SQLException {
        delegate().clearWarnings();
    }

    @Override
    public void close() throws SQLException {
        delegate().close();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        delegate().closeOnCompletion();
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return delegate().execute(sql);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return delegate().execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return delegate().execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return delegate().execute(sql, columnNames);
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return delegate().executeBatch();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return delegate().executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return delegate().executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return delegate().executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return delegate().executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return delegate().executeUpdate(sql, columnNames);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return delegate().getConnection();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return delegate().getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return delegate().getFetchSize();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return delegate().getGeneratedKeys();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return delegate().getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return delegate().getMaxRows();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return delegate().getMoreResults();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return delegate().getMoreResults(current);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return delegate().getQueryTimeout();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return delegate().getResultSet();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return delegate().getResultSetConcurrency();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return delegate().getResultSetHoldability();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return delegate().getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return delegate().getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return delegate().getWarnings();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return delegate().isClosed();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return delegate().isCloseOnCompletion();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return delegate().isPoolable();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return delegate().isWrapperFor(iface);
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        delegate().setCursorName(name);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        delegate().setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        delegate().setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        delegate().setFetchSize(rows);
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        delegate().setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        delegate().setMaxRows(max);
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        delegate().setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        delegate().setQueryTimeout(seconds);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return delegate().unwrap(iface);
    }

}
